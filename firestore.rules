/**
 * @fileOverview Firestore Security Rules for the dog food database application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and contributions, 
 * and role-based access control for administrative functions. Data is publicly readable where appropriate 
 * (e.g., ingredients, meal plans) but write access is carefully controlled.
 *
 * Data Structure:
 * - /users/{userId}/profile: User profile data, accessible only to the user and admins.
 * - /ingredients/{ingredientId}: Ingredient data, publicly readable, but only editable by admins.
 * - /meal_plans/{mealPlanId}: Meal plan data, publicly readable, but only editable by admins.
 * - /user_contributions/{contributionId}: User contributions, accessible to the submitting user and admins.
 * - /roles_admin/{userId}:  If a document exists, then the user is an admin.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy.
 * - Admin privileges are explicitly granted based on documents present in the `/roles_admin` collection.
 * - Read-only collections (e.g., `ingredients`, `meal_plans`) are explicitly marked as such.
 * - Data consistency is enforced for user-owned documents by validating that the userId in the path matches the userId in the document data.
 *
 * Denormalization for Authorization:
 *   - Admin status is checked by the presence of a document in `/roles_admin/{userId}`, avoiding costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user has admin privileges
      * @returns {boolean} True if the user document exists in `/roles_admin/{userId}`.
      */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }


    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}/profile
     * @allow (create) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can create their own profile with matching userId.
     * @allow (get) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can read their own profile.
     * @allow (update) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can update their own profile.
     * @allow (delete) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can delete their own profile.
     * @allow (get) Admin can read any profile.
     * @allow (update) Admin can update any profile.
     * @allow (delete) Admin can delete any profile.
     * @deny (create) User mismatchedUserId cannot create a profile under another userId.
     * @deny (update) User mismatchedUserId cannot update another user's profile.
     * @deny (delete) User mismatchedUserId cannot delete another user's profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Security rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) Any user can read or list ingredients.
     * @allow (create) Only admins can create ingredients.
     * @allow (update) Only admins can update ingredients.
     * @allow (delete) Only admins can delete ingredients.
     * @deny (create) Non-admin user cannot create an ingredient.
     * @deny (update) Non-admin user cannot update an ingredient.
     * @deny (delete) Non-admin user cannot delete an ingredient.
     * @principle Grants public read access, restricts write access to admins.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) Any user can read or list meal plans.
     * @allow (create) Only admins can create meal plans.
     * @allow (update) Only admins can update meal plans.
     * @allow (delete) Only admins can delete meal plans.
     * @deny (create) Non-admin user cannot create a meal plan.
     * @deny (update) Non-admin user cannot update a meal plan.
     * @deny (delete) Non-admin user cannot delete a meal plan.
     * @principle Grants public read access, restricts write access to admins.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can read their own contribution.
     * @allow (get) Admin can read any contribution.
     * @allow (create) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can create a contribution with matching userId.
     * @allow (update) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can update their own contribution.
     * @allow (delete) User Rs4K7WEwJIO5kg4vP2trdE9rdra2 can delete their own contribution.
     * @allow (update) Admin can update any contribution.
     * @allow (delete) Admin can delete any contribution.
     * @deny (create) User mismatchedUserId cannot create a contribution under another userId.
     * @deny (update) User mismatchedUserId cannot update another user's contribution.
     * @deny (delete) User mismatchedUserId cannot delete another user's contribution.
     * @principle Enforces document ownership for writes, restricts access to a user's own data, allows admin oversight.
     */
    match /user_contributions/{contributionId} {
      allow get: if isOwner(request.resource.data.userId) || isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && resource != null || isAdmin() && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null || isAdmin() && resource != null;
    }

    /**
     * @description Security rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check for admin status.
     * @allow (create) Only admins can grant admin roles.
     * @allow (update) Only admins can modify admin roles.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (create) Non-admin user cannot grant admin roles.
     * @deny (update) Non-admin user cannot modify admin roles.
     * @deny (delete) Non-admin user cannot revoke admin roles.
     * @principle Role-based access control for administrative functions.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}