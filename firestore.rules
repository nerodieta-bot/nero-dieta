/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with owner-only restrictions where applicable.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user and admins.
 * - /ingredients/{ingredientId}: Ingredient data, publicly readable, but editable only by admins.
 * - /meal_plans/{mealPlanId}: Meal plans, publicly readable, but editable only by admins.
 * - /user_contributions/{contributionId}: User submissions, readable by the submitting user and admins.
 * - /roles_admin/{userId}: Determines admin status via document existence.
 *
 * Key Security Decisions:
 * - User listing is disallowed for the /users collection to prevent information harvesting.
 * - Public read access is granted for the /ingredients and /meal_plans collections.
 * - The /roles_admin collection is used for DBAC (Database Access Control) based on document existence.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in /roles_admin/{userId}, avoiding complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     *              Also verifies that the resource actually exists to prevent modification of non-existent data.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges by checking for a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /***************** User Profiles *******************/

    /**
     * @description Manages access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching userId can read their profile. Admins can read any profile.
     * @allow (create) User can create their profile if the userId matches their auth.uid.
     * @allow (update) User can update their profile if the userId matches their auth.uid. Admins can update any profile.
     * @allow (delete) User can delete their profile if the userId matches their auth.uid. Admins can delete any profile.
     * @deny (get) User cannot read another user's profile unless they are an admin.
     * @deny (create) User cannot create a profile with a userId that doesn't match their auth.uid.
     * @deny (update) User cannot update another user's profile unless they are an admin.
     * @deny (delete) User cannot delete another user's profile unless they are an admin.
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // User listing is not permitted.

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /***************** Ingredients *******************/

    /**
     * @description Manages access to ingredient documents.
     * @path /ingredients/{ingredientId}
     * @allow (get) Any user can read ingredient data.
     * @allow (list) Any user can list ingredient data.
     * @allow (create) Only admins can create ingredient documents.
     * @allow (update) Only admins can update ingredient documents.
     * @allow (delete) Only admins can delete ingredient documents.
     * @deny (create) Non-admins cannot create ingredient documents.
     * @deny (update) Non-admins cannot update ingredient documents.
     * @deny (delete) Non-admins cannot delete ingredient documents.
     * @principle Public read access with admin-only writes.
     */
    match /ingredients/{ingredientId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /***************** Meal Plans *******************/

    /**
     * @description Manages access to meal plan documents.
     * @path /meal_plans/{mealPlanId}
     * @allow (get) Any user can read meal plan data.
     * @allow (list) Any user can list meal plan data.
     * @allow (create) Only admins can create meal plan documents.
     * @allow (update) Only admins can update meal plan documents.
     * @allow (delete) Only admins can delete meal plan documents.
     * @deny (create) Non-admins cannot create meal plan documents.
     * @deny (update) Non-admins cannot update meal plan documents.
     * @deny (delete) Non-admins cannot delete meal plan documents.
     * @principle Public read access with admin-only writes.
     */
    match /meal_plans/{mealPlanId} {
      allow get: if true;
      allow list: if true;

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /***************** User Contributions *******************/

    /**
     * @description Manages access to user contribution documents.
     * @path /user_contributions/{contributionId}
     * @allow (get) User with matching userId can read their contribution. Admins can read any contribution.
     * @allow (list) User can list their own contributions. Admins can list all contributions.
     * @allow (create) Any authenticated user can create a contribution.
     * @allow (update) User with matching userId can update their contribution. Admins can update any contribution.
     * @allow (delete) User with matching userId can delete their contribution. Admins can delete any contribution.
     * @deny (get) User cannot read another user's contribution unless they are an admin.
     * @deny (update) User cannot update another user's contribution unless they are the owner or an admin.
     * @deny (delete) User cannot delete another user's contribution unless they are the owner or an admin.
     * @principle Enforces document ownership for writes and admin override.
     */
    match /user_contributions/{contributionId} {
      allow get: if (resource.data.userId == request.auth.uid) || isAdmin();
      allow list: if (get(/databases/$(database)/documents/user_contributions/$(contributionId)).data.userId == request.auth.uid) || isAdmin();

      allow create: if isSignedIn();
      allow update: if ((resource.data.userId == request.auth.uid) && resource != null) || isAdmin();
      allow delete: if ((resource.data.userId == request.auth.uid) && resource != null) || isAdmin();
    }

    /***************** Admin Roles *******************/

    /**
     * @description Manages admin role assignments. Document existence confers admin rights.
     * @path /roles_admin/{userId}
     * @allow (get) Admins can verify another user's admin status.
     * @allow (create) Only admins can assign admin roles.
     * @allow (update) Only admins can modify admin role assignments.
     * @allow (delete) Only admins can revoke admin roles.
     * @deny (create) Non-admins cannot assign admin roles.
     * @deny (update) Non-admins cannot modify admin role assignments.
     * @deny (delete) Non-admins cannot revoke admin roles.
     * @principle DBAC (Database Access Control) via explicit admin role assignment.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Listing is not allowed.

      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}