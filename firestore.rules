rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in /roles_admin/{userId}.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the resource data.
     * @returns {boolean} True if the user is the existing owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == resource.data.id;
    }

    /**
     * @description Enforces that on create, the userId in the data matches the userId in the path.
     * @param {string} userId The user ID from the path.
     * @returns {boolean} True if the user ID in the data matches the user ID in the path.
     */
    function isValidNewOwner(userId) {
      return request.resource.data.id == userId;
    }

    /**
     * @description Enforces that on update, the userId in the data matches the userId in the existing data.
     * @param {string} userId The user ID from the path.
     * @returns {boolean} True if the user ID in the data matches the user ID in the existing data.
     */
    function isValidExistingOwner(userId) {
      return request.resource.data.id == resource.data.id;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with matching userId can create their profile.
     * @allow (get, update, delete) - User with matching userId or admin can access/modify the profile.
     * @deny (create) - User tries to create a profile with a userId that doesn't match their own.
     * @principle Enforces document ownership for writes and admin override.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get, update, delete: if isOwner(userId) || isAdmin();
      allow list: if false;
    }

    /**
     * @description Rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) - Anyone can read ingredients.
     * @allow (create, update, delete) - Only admins can modify ingredients.
     * @deny (create, update, delete) - Non-admins cannot modify ingredients.
     * @principle Public read access with admin-only writes.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) - Anyone can read meal plans.
     * @allow (create, update, delete) - Only admins can modify meal plans.
     * @deny (create, update, delete) - Non-admins cannot modify meal plans.
     * @principle Public read access with admin-only writes.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (create) - Signed-in user can create a user contribution.
     * @allow (get, list) - Signed-in user can get their own contribution or an admin can get any contribution.
     * @allow (update, delete) - Only admins can update or delete user contributions.
     * @deny (get, list) - User tries to access another user's contribution.
     * @principle Owner can read their own contributions, admins can read all.
     */
    match /user_contributions/{contributionId} {
      allow create: if isSignedIn();
      allow get: if isSignedIn() && get(/databases/$(database)/documents/user_contributions/$(contributionId)).data.userId == request.auth.uid || isAdmin();
      allow list: if isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Rules for admin role assignment.  Existence of a document grants admin status.
     * @path /roles_admin/{userId}
     * @allow (create) - Not applicable via the client.  Admin assignment should be done via the Firebase Admin SDK.
     * @allow (get) - Anyone can determine if a user is an admin by attempting to read this document.
     * @allow (update, delete) - Should only be modified via the Firebase Admin SDK.
     * @principle Explicit admin role assignment.
     */
    match /roles_admin/{userId} {
      allow get: if true;
      allow create, update, delete: if false;
      allow list: if false;
    }

    /**
     * @description Fallback rule to deny all other requests.
     * @path /{document=**}
     * @deny (read, write) - All read and write requests are denied.
     * @principle Default deny all to ensure no accidental open access.
     */
    match /{document=**} {
       allow read, write: if false;
    }
  }
}