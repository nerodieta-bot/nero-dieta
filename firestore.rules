/**
 * @fileoverview Firestore Security Rules for the dog food app.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model, with a separation of concerns between users and admins.
 * Users can only access their own profile data and create user contributions. Admins have full access to ingredients and meal plans.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only accessible by the user themselves or an admin.
 * - /ingredients/{ingredientId}: Stores ingredient information. Publicly readable, only writable by admins.
 * - /meal_plans/{mealPlanId}: Stores meal plans. Publicly readable, only writable by admins.
 * - /user_contributions/{contributionId}: Stores user contributions. Accessible by the user who created them and admins.
 * - /roles_admin/{userId}: Existence of a document at this path grants admin privileges to the user.
 *
 * Key Security Decisions:
 * - Listing of the /users collection is disallowed to prevent unauthorized access to user data.
 * - Admin privileges are granted based on the existence of a document in the /roles_admin/{userId} collection.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 * - User contributions include a userId field to enable owner-based access control. This avoids the need for server-side queries to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ————— Helper Functions —————

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on custom claim.
     * @return {boolean} True if the user has the 'admin' custom claim, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Checks if the authenticated user's UID matches the {userId} path parameter.
     * @param {string} userId The userId from the path.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwnerPath(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId field in the request data.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwnerField() {
      return isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId field in the existing resource data.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwnerResource() {
      return isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId field in the existing resource data, and the document exists.
     * @param {string} userId The userId from the path.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwnerPath(userId) && resource != null;
    }

    // ————— USERS —————

    /**
     * @description Allows a user to read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' reading their own profile.
     * @deny (get, update, delete) User with ID 'user123' trying to read 'user456' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow create: if isOwnerPath(userId);
      allow list: if false; // Listing users is not allowed
    }

    // ————— INGREDIENTS —————

    /**
     * @description Allows public read access to ingredients and admin-only write access.
     * @path /ingredients/{ingredientId}
     * @allow (get) Any user reading ingredient data.
     * @allow (create, update, delete) Admin user creating an ingredient.
     * @deny (create, update, delete) Non-admin user attempting to create an ingredient.
     * @principle Public read, admin-only write for ingredient data.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // ————— MEAL PLANS —————

    /**
     * @description Allows public read access to meal plans and admin-only write access.
     * @path /meal_plans/{mealPlanId}
     * @allow (get) Any user reading meal plan data.
     * @allow (create, update, delete) Admin user creating a meal plan.
     * @deny (create, update, delete) Non-admin user attempting to create a meal plan.
     * @principle Public read, admin-only write for meal plan data.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // ————— USER CONTRIBUTIONS —————

    /**
     * @description Allows logged-in users to create contributions with their own user ID, and allows access to contributions by their owner or an admin.
     * @path /user_contributions/{contributionId}
     * @allow (create) Logged-in user creating a contribution with their own user ID.
     * @allow (get, update, delete) Owner of the contribution or admin accessing the contribution.
     * @deny (create) Logged-in user attempting to create a contribution with another user's ID.
     * @deny (get, update, delete) Non-owner user attempting to access another user's contribution.
     * @principle Enforces ownership for user contributions and allows admin access.
     */
    match /user_contributions/{contributionId} {
      allow create: if isSignedIn() && isOwnerField();
      allow get, update, delete: if isExistingOwnerResource() || isAdmin();
      allow list: if isSignedIn(); // list dozwolony, ale patrz ↓ query rules
    }

    /**
     * @description Grant admin role to a user based on the existence of a document in the /roles_admin/{userId} collection
     * @path /roles_admin/{userId}
     * @allow get, create, update, delete: if isAdmin();
     * @principle DBAC (Database Acess Control) via explicit admin role assignment.
     */
     match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow create: if isAdmin();
        allow update: if false; //Prevent client side updates
        allow delete: if isAdmin();
        allow list: if false; // Listing not allowed
     }
    // Domyślnie: wszystko inne zablokowane
    match /{document=**} {
      allow read, write: if false;
    }

    function isExistingOwnerResource() {
        return isOwnerResource() && resource != null;
    }
  }
}