/**
 * @fileoverview Firestore Security Rules for the Dog Food App.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model with public read access where appropriate and strict ownership/admin control for writes.  The key principles are:
 *  1. Users can only read and write their own profiles.
 *  2. Ingredients and meal plans are publicly readable but admin-writeable.
 *  3. User contributions are readable by the user and admins.
 *  4. Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - `/users/{userId}/profile`: User profile data, secured with ownership.
 * - `/ingredients/{ingredientId}`: Public ingredient data, secured with admin-only writes.
 * - `/meal_plans/{mealPlanId}`: Public meal plan data, secured with admin-only writes.
 * - `/user_contributions/{contributionId}`: User-submitted ingredient data, readable by owner and admins.
 * - `/roles_admin/{userId}`:  Admin role assignments.  If a document exists for a user ID, that user is an admin.
 *
 * Key Security Decisions:
 * - Public read access for `/ingredients` and `/meal_plans` collections.
 * - Admin-only write access for `/ingredients` and `/meal_plans` collections.
 * - User-owned profiles with no listing allowed.
 * - User-owned contributions readable by the user, with no listing allowed.
 * - Admin role determined by document existence in `/roles_admin`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces document ownership and existence.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Implements role-based access control.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}/profile
     * @allow (get) User with matching {userId} can read their own profile.
     * @allow (create) User with matching {userId} can create their own profile.
     * @allow (update) User with matching {userId} can update their own profile.
     * @allow (delete) User with matching {userId} can delete their own profile.
     * @deny (get) User can't read another user's profile.
     * @deny (create) User can't create another user's profile.
     * @deny (update) User can't update another user's profile.
     * @deny (delete) User can't delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) Anyone can read ingredients.
     * @allow (create, update, delete) Only admins can modify ingredients.
     * @deny (create, update, delete) Non-admins can't modify ingredients.
     * @principle Allows public read access and restricts writes to admins.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) Anyone can read meal plans.
     * @allow (create, update, delete) Only admins can modify meal plans.
     * @deny (create, update, delete) Non-admins can't modify meal plans.
     * @principle Allows public read access and restricts writes to admins.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) User with matching userId or admin can read the contribution.
     * @allow (create) Any signed-in user can create a contribution.
     * @allow (update, delete) Only admins can modify contributions.
     * @deny (get) User can't read another user's contribution unless they are an admin.
     * @deny (update, delete) Non-admins can't modify contributions.
     * @principle Restricts access to user contributions to the owner and admins.
     */
    match /user_contributions/{contributionId} {
      allow get: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Rules for admin role assignment.
      * @path /roles_admin/{userId}
      * @allow (get) Only admins can read admin role assignments.
      * @allow (create) Only admins can create admin role assignments.
      * @allow (update) Only admins can update admin role assignments.
      * @allow (delete) Only admins can delete admin role assignments.
      * @allow (list) Only admins can list the admin role assignments.
      * @deny (get, create, update, delete, list) Non-admins can't read or modify admin role assignments.
      * @principle Restricts access to the admin role assignment collection to admins only.
      */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}