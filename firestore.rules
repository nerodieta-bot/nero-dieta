/**
 * @fileoverview Firestore Security Rules for the dog food app.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control (RBAC) model with strict data ownership where applicable.
 * Users can only read and write their own profile data, while admins have broader access. Public data (ingredients, meal plans) is readable by all, but modifiable only by admins.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the user and admins.
 * - /ingredients/{ingredientId}: Ingredient data, publicly readable, admin-only write.
 * - /meal_plans/{mealPlanId}: Meal plans, publicly readable, admin-only write.
 * - /user_contributions/{contributionId}: User submissions, readable by owner/admins, writable by anyone (subject to owner validation).
 * - /roles_admin/{userId}: Admin role assignments. Document existence confers admin status.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public data (ingredients, meal plans) is readable by all, including unauthenticated users.
 * - Admins are explicitly defined via documents in the `/roles_admin` collection.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, avoiding the need for complex queries.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @param {string} userId - The user ID to check.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner and the resource exists.
     * @param {string} userId - The user ID to check.
     * @returns {boolean} True if the user is an existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'H2c7xSiluBXoPyJNYR7v3K4plec2' can create their profile with matching userId.
     * @allow (get) User 'H2c7xSiluBXoPyJNYR7v3K4plec2' can get their own profile.
     * @allow (update) User 'H2c7xSiluBXoPyJNYR7v3K4plec2' can update their own profile.
     * @deny (create) User 'OtherUser' cannot create a profile with userId 'H2c7xSiluBXoPyJNYR7v3K4plec2'.
     * @deny (get) User 'OtherUser' cannot get the profile of user 'H2c7xSiluBXoPyJNYR7v3K4plec2'.
     * @deny (delete) Non-admin cannot delete user profile.
     * @principle Enforces document ownership for writes; admins can read and write any user profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get) Any user can read ingredient data.
     * @allow (list) Any user can list ingredient data.
     * @deny (create) Non-admin cannot create ingredient data.
     * @deny (update) Non-admin cannot update ingredient data.
     * @deny (delete) Non-admin cannot delete ingredient data.
     * @principle Public read access with admin-only writes.
     */
    match /ingredients/{ingredientId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get) Any user can read meal plan data.
     * @allow (list) Any user can list meal plan data.
     * @deny (create) Non-admin cannot create meal plan data.
     * @deny (update) Non-admin cannot update meal plan data.
     * @deny (delete) Non-admin cannot delete meal plan data.
     * @principle Public read access with admin-only writes.
     */
    match /meal_plans/{mealPlanId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) User can read their own contributions.
     * @allow (list) User can list their own contributions.
     * @deny (create) Non-authenticated user cannot create contributions.
     * @allow (update) Only admin can update contributions.
     * @allow (delete) Only admin can delete contributions.
     * @principle Owner and admins can read; anyone can create with owner validation; admins can update/delete.
     */
    match /user_contributions/{contributionId} {
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for admin roles.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can check for other admins.
     * @deny (list) No one can list admins.
     * @allow (create) Only admins can assign admin roles.
     * @allow (update) Only admins can update admin roles.
     * @allow (delete) Only admins can remove admin roles.
     * @principle Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}