/**
 * @fileoverview Firestore Security Rules for the Dog Food App.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public readability with restricted write access.
 * User-specific data is secured via ownership, while administrative privileges are managed through explicit role assignment.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owner and admins.
 * - /ingredients/{ingredientId}: Publicly readable ingredient data, editable only by admins.
 * - /meal_plans/{mealPlanId}: Publicly readable meal plans, editable only by admins.
 * - /user_contributions/{contributionId}: User-submitted content, readable by the owner and admins.
 * - /roles_admin/{userId}:  DBAC (Database Acess Control) via explicit admin role assignment. If a document exists, then the user is an admin.
 *
 * Key Security Decisions:
 * - Public read access is granted for ingredients and meal plans to facilitate discovery.
 * - User listing is explicitly disallowed to prevent enumeration.
 * - Administrative privileges are granted based on the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Denormalization for Authorization:
 * - The `user_contributions` collection requires the `userId` field within each document to determine ownership. This denormalization avoids needing to query the `/users/{userId}` collection for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID and resource data.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has admin privileges.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, update, delete) Owner or admin can access/modify the profile.
     * @deny (create) User cannot create a profile with an ID different from their own.
     * @deny (list) Listing users is not allowed.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow list: if false;
    }

    /**
     * @description Rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) Everyone can read ingredients.
     * @allow (create, update, delete) Only admins can manage ingredients.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete ingredients.
     * @principle Restricts write access to ingredients to admins only.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) Everyone can read meal plans.
     * @allow (create, update, delete) Only admins can manage meal plans.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete meal plans.
     * @principle Restricts write access to meal plans to admins only.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get, update, delete) Owner or admin can access/modify the contribution.
     * @allow (create) Signed-in user can create a contribution with their userId.
     * @deny (create) User cannot create a contribution with a different userId.
     * @deny (list) Listing is not allowed.
     * @principle Enforces document ownership for user contributions.
     */
    match /user_contributions/{contributionId} {
      allow get, update, delete: if isExistingOwner(request.resource.data.userId) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow list: if isAdmin(); // Only admins can list all contributions
    }

       /**
        * @description Rules for admin role assignment.
        * @path /roles_admin/{userId}
        * @allow (get) Admins can see who is an admin.
        * @allow (create, update, delete) Only admins can manage admin roles.
        * @deny (list) Listing is not allowed.
        * @principle Restricts management of admin roles to existing admins.
        */
    match /roles_admin/{userId} {
         allow get: if isAdmin();
         allow create, update, delete: if isAdmin();
         allow list: if false;
    }
  }
}