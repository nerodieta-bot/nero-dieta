/**
 * @fileoverview Firestore Security Rules for the dog food database application.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of public read access for ingredient data and user-ownership for user profile data.
 *
 * Data Structure:
 * - /ingredients/{ingredientId}: Stores publicly readable ingredient data.
 * - /users/{userId}: Stores user profile information, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - Ingredient data is publicly readable but write access is not implemented, since there are no create/update/delete application features to handle this.
 * - User profiles are strictly owned by the corresponding user; only the authenticated user can read/write their profile.
 * - User listing is disabled; clients cannot enumerate all user profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to ingredient documents. Write access is denied.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) Any user can read ingredient data.
     * @deny (create, update, delete) No one can modify ingredient data.
     * @principle Allows public read access for ingredient data while restricting write access.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID and the document exists.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID and the document exists.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Authenticated user cannot create a profile with a userId that does not match their auth UID.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.get('createdAt', null) != null && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.get('createdAt', resource.data.createdAt) != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}