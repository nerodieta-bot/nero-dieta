/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and an admin-controlled model for ingredients and meal plans.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user and admins.
 * - /ingredients/{ingredientId}: Ingredient data, publicly readable, but only admins can modify.
 * - /meal_plans/{mealPlanId}: Meal plan data, publicly readable, but only admins can modify.
 * - /user_contributions/{contributionId}: User contributions, readable by the submitting user and admins.
 * - /roles_admin/{userId}:  If a document exists, then the user is an admin.
 *
 * Key Security Decisions:
 * - Users can only create their own profile.
 * - User listing is disabled for the /users collection to protect privacy.
 * - Public read access is granted for ingredients and meal plans, but write access is restricted to admins.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 *
 * Structural Segregation:
 * - Publicly readable data (ingredients, meal plans) is stored in top-level collections separate from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the existence of a document in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is signed in and the UID matches; otherwise, false.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is signed in, the UID matches, and the resource exists; otherwise, false.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Defines security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId or admin can perform these operations.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (update) - Authenticated user without matching userId cannot update the profile.
     * @principle Enforces document ownership for writes; admins can also modify.
     */
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow get, update, delete: if isExistingOwner(userId) || isAdmin();
      allow list: if false; // User listing is not allowed.
    }

    /**
     * @description Defines security rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) - Anyone can read the ingredients.
     * @allow (create, update, delete) - Only admins can modify ingredients.
     * @deny (create) - Non-admins cannot create ingredients.
     * @deny (update) - Non-admins cannot update ingredients.
     * @principle Public read access with admin-only writes.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) - Anyone can read the meal plans.
     * @allow (create, update, delete) - Only admins can modify meal plans.
     * @deny (create) - Non-admins cannot create meal plans.
     * @deny (update) - Non-admins cannot update meal plans.
     * @principle Public read access with admin-only writes.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Defines security rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) - The owner and admins can read a contribution.
     * @allow (create) - Any signed-in user can create a contribution.
     * @allow (update, delete) - Only admins can modify contributions.
     * @deny (create) - Unauthenticated users cannot create contributions.
     * @deny (update) - Non-admins cannot update contributions.
     * @principle User-submitted content readable by the submitter and admins.
     */
    match /user_contributions/{contributionId} {
      allow get: if isOwner(request.resource.data.userId) || isAdmin();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin();
      allow list: if isSignedIn() && request.auth.uid == resource.data.userId; // Owner can list their own contributions
    }

    /**
     * @description Defines security rules for admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (create) - Only admins can assign admin roles.
     * @allow (get, delete) - Only admins can read or remove admin roles.
     * @deny (create) - Non-admins cannot assign admin roles.
     * @deny (delete) - Non-admins cannot remove admin roles.
     * @principle Admin role management restricted to existing admins.
     */
    match /roles_admin/{userId} {
      allow create, get, delete: if isAdmin();
      allow update: if false;
      allow list: if false;
    }

    /**
     * @description Prevents access to any other documents in the database.
     * @path /{document=**}
     * @deny (read, write) - All read and write operations are denied on all other paths.
     * @principle Explicitly denies all access to undefined paths.
     */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}