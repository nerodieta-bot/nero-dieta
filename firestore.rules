/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with ownership checks.
 *
 * Data Structure:
 * - /users/{userId}/profile: User profile data, accessible only to the user and admins.
 * - /ingredients/{ingredientId}: Ingredient data, publicly readable, admin-writeable.
 * - /meal_plans/{mealPlanId}: Meal plan data, publicly readable, admin-writeable.
 * - /user_contributions/{contributionId}: User-submitted content, readable by the user and admins.
 * - /roles_admin/{userId}: Admin role assignments; presence of a document grants admin status.
 *
 * Key Security Decisions:
 * - Public read access to /ingredients and /meal_plans.
 * - Strict ownership for /users/{userId}/profile and /user_contributions.
 * - Admin role managed through the /roles_admin collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Ensures that only authenticated users can access certain resources.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of the resource, confirming existence.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Verifies both ownership and existence before destructive operations.
     */
    function isExistingOwner(userId) {
      return (isOwner(userId) && resource != null);
    }

     /**
      * @description Checks if the user is an admin.
      * @path N/A (Helper Function)
      * @allow N/A (Helper Function)
      * @deny N/A (Helper Function)
      * @principle Enforces role-based access control for administrative functions.
      */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}/profile
     * @allow (get, list, create, update, delete) - User with matching {userId} can access their own profile. Admin can access any profile.
     * @deny (get, list, create, update, delete) - User trying to access another user's profile.
     * @principle Enforces document ownership and admin override.
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id || isAdmin();
      allow delete: if isExistingOwner(userId) || isAdmin();
    }

    /**
     * @description Grants access to ingredient data.
     * @path /ingredients/{ingredientId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can write.
     * @deny (create, update, delete) - Non-admins attempting to write.
     * @principle Provides public read access with restricted write access.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to meal plan data.
     * @path /meal_plans/{mealPlanId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - Only admins can write.
     * @deny (create, update, delete) - Non-admins attempting to write.
     * @principle Provides public read access with restricted write access.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Grants access to user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) - Owner or admin can get.
     * @allow (list) - Owner or admin can list.
     * @allow (create) - Signed-in users can create.
     * @allow (update, delete) - Only the owner or an admin can modify.
     * @deny (get, list, create, update, delete) - Other users attempting to access.
     * @principle Enforces ownership and admin override for contributions.
     */
    match /user_contributions/{contributionId} {
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isAdmin();
    }

    /**
     * @description Grants access to admin role assignments.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if false;
     * @allow create: if isAdmin();
     * @allow update: if false;
     * @allow delete: if isAdmin();
     * @deny  Non-admins attempting to access.
     * @principle Restricts role management to existing admins.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }
  }
}