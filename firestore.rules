/**
 * @fileOverview Firestore Security Rules for the dog food database application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and contributions,
 * public read access for ingredients and meal plans, and admin-only write access for sensitive data.
 * Authorization decisions are made independently, avoiding hierarchical dependencies.
 *
 * Data Structure:
 * - /users/{userId}: User profile information. Owner-only access.
 * - /ingredients/{ingredientId}: Ingredient data. Publicly readable, admin-only writable.
 * - /meal_plans/{mealPlanId}: Meal plans. Publicly readable, admin-only writable.
 * - /user_contributions/{contributionId}: User contributions. Owner or admin readable, owner-only writable.
 * - /roles_admin/{userId}: Admin role assignments. Existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections (ingredients, meal_plans) are publicly readable.
 * - Admin status is determined by the existence of a document in /roles_admin/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document, and that the resource exists.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

     /**
      * @description Checks if the user has admin privileges by verifying the existence of a document in /roles_admin/{userId}.
      * @returns {boolean} True if the user is an admin, false otherwise.
      */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @deny (get) Authenticated user cannot read other user profiles.
     * @deny (create) Unauthenticated user cannot create a profile.
     * @deny (update) Authenticated user cannot update other user profiles.
     * @deny (delete) Authenticated user cannot delete other user profiles.
     * @principle Enforces document ownership for reads and writes; users can only access their own profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for ingredients.
     * @path /ingredients/{ingredientId}
     * @allow (get) Anyone can read ingredient data.
     * @allow (list) Anyone can list ingredient data.
     * @allow (create) Only admins can create ingredients.
     * @allow (update) Only admins can update ingredients.
     * @allow (delete) Only admins can delete ingredients.
     * @deny (create) Non-admins cannot create ingredients.
     * @deny (update) Non-admins cannot update ingredients.
     * @deny (delete) Non-admins cannot delete ingredients.
     * @principle Public read access with admin-only writes for ingredient management.
     */
    match /ingredients/{ingredientId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for meal plans.
     * @path /meal_plans/{mealPlanId}
     * @allow (get) Anyone can read meal plan data.
     * @allow (list) Anyone can list meal plan data.
     * @allow (create) Only admins can create meal plans.
     * @allow (update) Only admins can update meal plans.
     * @allow (delete) Only admins can delete meal plans.
     * @deny (create) Non-admins cannot create meal plans.
     * @deny (update) Non-admins cannot update meal plans.
     * @deny (delete) Non-admins cannot delete meal plans.
     * @principle Public read access with admin-only writes for meal plan management.
     */
    match /meal_plans/{mealPlanId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Security rules for user contributions.
     * @path /user_contributions/{contributionId}
     * @allow (get) The submitting user or an admin can read the contribution.
     * @allow (list) The submitting user can list their own contributions.
     * @allow (create) An authenticated user can create a contribution.
     * @allow (update) Only the submitting user can update the contribution.
     * @allow (delete) Only the submitting user can delete the contribution.
     * @deny (get) Other users cannot read a user's contribution.
     * @deny (create) Unauthenticated users cannot create contributions.
     * @deny (update) Other users cannot update a user's contribution.
     * @deny (delete) Other users cannot delete a user's contribution.
     * @principle Enforces ownership for contributions, allowing only the submitting user or admins to read and write.
     */
    match /user_contributions/{contributionId} {
      allow get: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Security rules for admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (get) Only admins can verify the existance of another admin.
     * @allow (create) Only admins can assign admin role.
     * @allow (update) Only admins can change admin role.
     * @allow (delete) Only admins can delete admin role.
     * @deny (get) Non-admins cannot verify another admin.
     * @deny (create) Non-admins cannot assign admin role.
     * @deny (update) Non-admins cannot change admin role.
     * @deny (delete) Non-admins cannot delete admin role.
     * @principle Only admins can manage admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false; // prevent admins from making themselves no longer an admin.
      allow delete: if isAdmin();
    }
  }
}