{
  "entities": {
    "Ingredient": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ingredient",
      "type": "object",
      "description": "Represents an ingredient in the dog food database.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ingredient."
        },
        "name": {
          "type": "string",
          "description": "The name of the ingredient."
        },
        "status": {
          "type": "string",
          "description": "The safety status of the ingredient (safe, warning, danger)."
        },
        "catIcon": {
          "type": "string",
          "description": "The category icon for the ingredient."
        },
        "icon": {
          "type": "string",
          "description": "The icon representing the ingredient."
        },
        "category": {
          "type": "string",
          "description": "The category the ingredient belongs to."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the ingredient."
        },
        "warning": {
          "type": "string",
          "description": "Warning information for the ingredient."
        },
        "portion": {
          "type": "string",
          "description": "Recommended portion size of the ingredient."
        },
        "prep": {
          "type": "string",
          "description": "Preparation instructions for the ingredient."
        },
        "nero": {
          "type": "string",
          "description": "Nero's comment on the ingredient."
        },
        "toxicity": {
          "type": "string",
          "description": "Toxicity level of the ingredient"
        },
        "klinikaInfo": {
          "type": "string",
          "description": "Information of ingredient's toxicity and necessary first aid measures"
        }
      },
      "required": [
        "id",
        "name",
        "status",
        "category",
        "description"
      ]
    },
    "UserProfile": {
      "title": "User Profile",
      "description": "Represents a user's profile in the application.",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "description": "The user's primary email address."
        },
        "ownerName": {
          "type": "string",
          "description": "The name of the dog's owner."
        },
        "dogName": {
          "type": "string",
          "description": "The name of the user's dog."
        },
        "phoneNumber": {
          "type": "string",
          "description": "The user's phone number, if provided."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the user profile was created."
        }
      },
      "required": [
        "createdAt"
      ]
    },
    "ContactMessage": {
      "title": "Contact Message",
      "description": "Represents a message sent through the contact form.",
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the person who sent the message."
        },
        "email": {
          "type": "string",
          "format": "email",
          "description": "The email address of the sender."
        },
        "message": {
          "type": "string",
          "description": "The content of the message."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the message was sent."
        }
      },
      "required": [
        "name",
        "email",
        "message",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "google.com",
      "password"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/ingredients/{ingredientId}",
        "definition": {
          "entityName": "Ingredient",
          "schema": {
            "$ref": "#/backend/entities/Ingredient"
          },
          "description": "Stores ingredient documents, including their ID, name, safety status, category, description, and other relevant details.",
          "params": [
            {
              "name": "ingredientId",
              "description": "The unique identifier for the ingredient."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores public user profile information.",
          "params": [
            {
              "name": "userId",
              "description": "The user's unique ID from Firebase Authentication."
            }
          ]
        }
      },
      {
        "path": "/contact_messages/{messageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores messages submitted through the contact form. Only accessible by administrators.",
          "params": [
            {
              "name": "messageId",
              "description": "The unique identifier for the contact message."
            }
          ]
        }
      }
    ],
    "reasoning": "The data structure is designed to store ingredient information for a dog food database, focusing on safety and providing detailed information for users. A single collection, `/ingredients`, is used to store all ingredient documents. This simplifies data access and security rules. Structural Segregation is maintained by ensuring all documents in the collection share the same security needs (publicly accessible ingredient data).\n\nAuthorization Independence is achieved because the ingredient data doesn't rely on parent documents or user-specific information. This avoids the need for `get()` calls in security rules and enables secure list operations. The application will retrieve documents from the /ingredients collection to display to the user.\n\nThe DBAC principle is followed because the data displayed will be the same for all users, no user based roles or custom claims are needed.\n\nA new collection `/contact_messages` has been added to store submissions from the contact form. This keeps user-submitted content separate from the public ingredient data and user profiles, allowing for more restrictive security rules (e.g., only admins can read/write). This follows the principle of least privilege and structural segregation."
  }
}
